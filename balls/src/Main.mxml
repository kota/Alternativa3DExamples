<?xml version="1.0" encoding="utf-8"?>
<s:Application
  xmlns:s="library://ns.adobe.com/flex/spark"
  xmlns:mx="library://ns.adobe.com/flex/mx"
  xmlns:fx="http://ns.adobe.com/mxml/2009"
  width="760" height="560"
  creationComplete="init()"
  backgroundColor="0x404060"
  frameRate="30"
>
<fx:Script>
<![CDATA[
  import alternativa.engine3d.core.Camera3D;
  import alternativa.engine3d.core.Object3D;
  import alternativa.engine3d.core.Resource;
  import alternativa.engine3d.core.events.MouseEvent3D;
  import alternativa.engine3d.controllers.SimpleObjectController;
  import alternativa.engine3d.resources.BitmapTextureResource;
  import alternativa.engine3d.core.View;
  import alternativa.engine3d.core.Debug;
  import alternativa.engine3d.materials.*;
  import alternativa.engine3d.primitives.*;
  import alternativa.engine3d.lights.OmniLight;
  import alternativa.engine3d.collisions.EllipsoidCollider
  import caurina.transitions.*;
 
  import flash.display.Sprite;
  import flash.display.Stage3D;
  import flash.events.Event;
  import flash.utils.Timer;

  import mx.core.FlexGlobals;
  import mx.core.UIComponent;
  import net.hires.utils.Stats;

  private var _rootContainer:Object3D = new Object3D();
  private var _camera:Camera3D;
  private var _stage3D:Stage3D;

  private var _sphere:GeoSphere;
  private var _plane:Plane;
  private var _hitEffect:Plane;
  private var _omniLight:OmniLight = new OmniLight(0xFF0000, 100,1000);
  private var _balls:Array = [];

  private var _collider:EllipsoidCollider = new EllipsoidCollider(10,10,10);
  private var _controller:SimpleObjectController;  

  private function init():void{
  }

  private var statsUI:UIComponent = new UIComponent;
  private function showStatsForDebug():void {
      statsUI.addChild(new Stats());
      statsUI.y = 380;
      addElement(statsUI);
  }

  private function prepareView():void{
    showStatsForDebug();
    _camera = new Camera3D(0.1, 10000);
    _camera.view = new View(760, 560);
    _camera.view.renderToBitmap = true;
    _camera.view.hideLogo();
    _camera.view.backgroundColor = 0xFFFFFF;
    _camera.view.backgroundAlpha = 0;
    _camera.rotationX = Math.PI;
    _camera.z = 2000;
    baseSprite.addChild(_camera.view);
    _rootContainer.addChild(_camera);
      
    var bitmapData:BitmapData = new BitmapData(32,32,true,0xFFFFFFFF);
    var texture:BitmapTextureResource = new BitmapTextureResource(bitmapData);
    var material:VertexLightTextureMaterial = new VertexLightTextureMaterial(texture);

    for(var i:int=0;i<100;i++){
      var geoSphere:GeoSphere = new GeoSphere(3,3);
      geoSphere.setMaterialToAllSurfaces(material);
      _rootContainer.addChild(geoSphere);
      var ball:Ball = new Ball(geoSphere);
      _balls.push(ball);
    }

    _plane = new Plane(10,10,5,5,true);
    _plane.z = 1900;
    _plane.setMaterialToAllSurfaces(material);
    _rootContainer.addChild(_plane);

    _hitEffect = new Plane(500,500,5,5,true);
    _hitEffect.z = 1990;
    _hitEffect.setMaterialToAllSurfaces(material);
    _hitEffect.visible = false;
    _rootContainer.addChild(_hitEffect);

    _omniLight.intensity = 3;
    _omniLight.z = 2000;
    _rootContainer.addChild(_omniLight);

    _stage3D = stage.stage3Ds[0];
    _stage3D.addEventListener(Event.CONTEXT3D_CREATE, onContextCreate);
    _stage3D.requestContext3D(); 
  }

  private function onContextCreate(e:Event):void {
    for each(var resource:Resource in _rootContainer.getResources(true)){
      resource.upload(_stage3D.context3D);
    }
    stage.addEventListener(Event.ENTER_FRAME, onEnterFrame);
    _controller = new SimpleObjectController(stage,_plane,100);
  }

  private function onEnterFrame(e:Event):void {
    for each(var ball:Ball in _balls){
      if(ball.isOutOfSight()){
        ball.reset();
      } else {
        ball.update();
        var hit:Boolean = _collider.getCollision(ball.position,ball.speed,new Vector3D(),new Vector3D(), _plane);
        if(hit){
          var timer:Timer = new Timer(100,1);
          timer.addEventListener(TimerEvent.TIMER_COMPLETE,onTimerComplete);
          _hitEffect.visible = true;
          timer.start();
        }
      }
    }
    _controller.update();
    _camera.render(_stage3D);
  }

  private function onTimerComplete(e:Event):void{
    e.target.removeEventListener(TimerEvent.TIMER_COMPLETE,onTimerComplete);
    _hitEffect.visible = false;
  }

  private function dispose():void{
    for each (var resource:Resource in _rootContainer.getResources(true)){
      resource.dispose();
    }
    _camera.render(_stage3D);
    stage.removeEventListener(Event.ENTER_FRAME, onEnterFrame);
    _stage3D.removeEventListener(Event.CONTEXT3D_CREATE, onContextCreate);
  }

]]>
</fx:Script>

<s:SpriteVisualElement id="baseSprite" width="100%" height="100%" addedToStage="prepareView()"/>

</s:Application>

